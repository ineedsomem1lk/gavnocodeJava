#pragma kernel CSMain

RWTexture2D<float4> Destination;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float3 _LightDirection;

float power;
float darkness;
float3 colorPrimeMix;
float3 colorSecondMix;

static const float eps = 0.001f;
static const float maxDst = 500;
static const int maxStepCount = 50;

struct Ray{
    float3 origin;
    float3 direction;
};

Ray ray(float3 origin, float3 direction){
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray trace_ray(float2 uv){
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return ray(origin, direction);
}

float2 get_texel(float3 position){
    float3 z = position;
    float t = 0.0;
    float scale = 2;
    for (int i = 0; i < 15; i++) {
        z = abs(z);
        if (z.x - z.y < 0.0) { z.xy = z.yx; }
        if (z.x - z.z < 0.0) { z.xz = z.zx; }
        if (z.y - z.z < 0.0) { z.yz = z.zy; }
        z.x = scale * z.x - (scale - 1.0);
        z.y = scale * z.y - (scale - 1.0);
        z.z = scale * z.z;
        if (z.z > (scale - 1.0) * 0.5){
            z.z -= scale - 1.0;
        }
        float m = dot(z,z);
        t = float(i + 1);
        if (m >= 8.0){
            break;
        }
        scale = power;
    }
    return (length(z) - 2.0) * pow(scale, -t);
}

float3 get_normal(float3 p){
    float x = get_texel(float3(p.x + eps, p.y, p.z)).y - get_texel(float3(p.x - eps, p.y, p.z)).y;
    float y = get_texel(float3(p.x, p.y + eps, p.z)).y - get_texel(float3(p.x, p.y - eps, p.z)).y;
    float z = get_texel(float3(p.x, p.y, p.z + eps)).y - get_texel(float3(p.x, p.y, p.z - eps)).y;
    return normalize(float3(x, y, z));
}


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID){
    uint width, height;
    Destination.GetDimensions(width, height);
    float2 uv = id.xy / float2(width, height);
    float4 result = lerp(float4(255, 13, 203, 1), float4(50, 180, 200, 1), uv.x) / 255.0;
    Ray ray = trace_ray(uv * 2 - 1);
    float rayDst = 0;
    int marchSteps = 0; 
    while (rayDst < maxDst && marchSteps < maxStepCount){
        marchSteps++;
        float2 data = get_texel(ray.origin);
        float dst = data.y;
        if (dst <= eps){
            float escapeIterations = data.x;
            float3 normal = get_normal(ray.origin - ray.direction * eps * 2);

            float colorPrimary = saturate(dot(normal * 0.5 + 0.5, -_LightDirection)); 
            float colorSecondary = saturate(escapeIterations / 16.0);
            float3 colourMix = saturate(colorPrimary * colorPrimeMix + colorSecondary * colorSecondMix);

            result = float4(colourMix.xyz, 1);
            break;
        }
        ray.origin += ray.direction * dst;
        rayDst += dst;
    }
    float rim = marchSteps / darkness;
    Destination[id.xy] = lerp(result, 1, 0.2) * rim;
}